generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  id                        Int            @id @default(autoincrement())
  email                     String         @unique
  name                      String
  avatar                    String?
  password                  String?
  currentHashedRefreshToken String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @default(now()) @updatedAt
  preference                Preference?
  watchlist                 Watchlist[]
  Notification                    Notification[]
  Notification              Notification[]
}

model Status {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  watchlist Watchlist[]
}

model Preference {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  genreIds  Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Watchlist {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  showId    Int
  status    Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId  Int
  episodes  Episode[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, showId])
}

model Episode {
  id            Int       @id @default(autoincrement())
  episodeNumber Int
  seasonNumber  Int
  watchlist     Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  watchlistId   Int
  isWatched     Boolean
  airDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([episodeNumber, seasonNumber, watchlistId])
  Notification Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  showId    Int
  rating    Int?
  title     String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, showId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  episode   Episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId Int
  isRead    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
