generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  name      String?
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Genre {
  id            Int             @id @default(autoincrement())
  name          String
  externalId    Int             @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  GenresOnShows GenresOnShows[]
}

model Gender {
  id         Int      @id @default(autoincrement())
  name       String
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  persons    Person[]
}

model Person {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @default("")
  image       String
  birthday    DateTime
  deathday    DateTime?
  gender      Gender    @relation(fields: [genderId], references: [id])
  genderId    Int
  externalId  Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

<<<<<<< HEAD
model Status {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shows     Show[]
}

model Show {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  wideImage      String
  tallImage      String
  episodeRuntime Int
  isInProduction Boolean
  status         Status          @relation(fields: [statusId], references: [id])
  statusId       Int
  genres         GenresOnShows[]
  externalId     Int             @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Season         Season[]
}

model GenresOnShows {
  show    Show  @relation(fields: [showId], references: [id])
  showId  Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([showId, genreId])
}

model Season {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  tallImage   String
  number      Int
  show        Show      @relation(fields: [showId], references: [id])
  showId      Int
  externalId  Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Episode     Episode[]
}

model Episode {
  id          Int      @id @default(autoincrement())
  description String   @default("")
  airDate     DateTime
  number      DateTime
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    Int
  externalId  Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
=======
model Keyword {
  id         Int      @id @default(autoincrement())
  name       String
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
>>>>>>> 5b8d045db5279188dfcf269565a7af924f0f05a0
}
