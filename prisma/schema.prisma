generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  id                        Int          @id @default(autoincrement())
  email                     String       @unique
  name                      String
  avatar                    String?
  password                  String?
  currentHashedRefreshToken String?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @default(now()) @updatedAt
  Preference                Preference[]
}

model Genre {
  id         Int      @id @default(autoincrement())
  name       String
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shows      Show[]   @relation("GenreToShow")
}

model Gender {
  id         Int      @id @default(autoincrement())
  name       String
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  persons    Person[]
}

model Person {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @default("")
  image       String?
  birthday    DateTime?
  deathday    DateTime?
  gender      Gender    @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId    Int
  externalId  Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  casts       Cast[]
  Crew        Crew[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shows     Show[]
}

model Show {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String
  wideImage           String?
  tallImage           String?
  episodeRuntime      Int?
  isInProduction      Boolean?
  status              Status?             @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId            Int?
  externalId          Int                 @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  genres              Genre[]             @relation("GenreToShow")
  keywords            Keyword[]           @relation("KeywordToShow")
  productionCompanies ProductionCompany[] @relation("ProductionCompanyToShow")
  seasons             Season[]
  casts               Cast[]
  crews               Crew[]
}

model Season {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  tallImage   String?
  number      Int
  show        Show      @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId      Int
  externalId  Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  episodes    Episode[]
}

model Episode {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @default("")
  wideImage   String?
  airDate     DateTime?
  number      Int
  season      Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId    Int
  externalId  Int       @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Keyword {
  id         Int      @id @default(autoincrement())
  name       String
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shows      Show[]   @relation("KeywordToShow")
}

model ProductionCompany {
  id         Int      @id @default(autoincrement())
  name       String
  logo       String?
  externalId Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  shows      Show[]   @relation("ProductionCompanyToShow")
}

model Cast {
  id        Int    @id @default(autoincrement())
  person    Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  Int
  show      Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId    Int
  order     Int
  character String
}

model Crew {
  id         Int    @id @default(autoincrement())
  person     Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   Int
  show       Show   @relation(fields: [showId], references: [id], onDelete: Cascade)
  showId     Int
  department String
  job        String
}

model Preference {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  genreIds  Int[]
  showIds   Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
